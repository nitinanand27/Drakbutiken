//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Blog Post List Page</summary>
	[PublishedContentModel("pageBlogList")]
	public partial class PageBlogList : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractTopMenu
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageBlogList";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageBlogList(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageBlogList, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[ImplementPropertyType("dateFormat")]
		public string DateFormat
		{
			get { return this.GetPropertyValue<string>("dateFormat"); }
		}

		///<summary>
		/// Disqus Short Name
		///</summary>
		[ImplementPropertyType("disqusShortName")]
		public string DisqusShortName
		{
			get { return this.GetPropertyValue<string>("disqusShortName"); }
		}

		///<summary>
		/// Hide authors: Check this box to hide anything author related from post lists and post pages. You will still be able to add authors and define an author for each post, but the information won't appear anywhere.
		///</summary>
		[ImplementPropertyType("hideAuthors")]
		public bool HideAuthors
		{
			get { return this.GetPropertyValue<bool>("hideAuthors"); }
		}

		///<summary>
		/// Hide categories: Check this box to hide anything category related from post lists and post pages. You will still be able to manage categories and assign articles to categories, but the information won't appear anywhere.
		///</summary>
		[ImplementPropertyType("hideCategories")]
		public bool HideCategories
		{
			get { return this.GetPropertyValue<bool>("hideCategories"); }
		}

		///<summary>
		/// Hide dates: Check this box to prevent post dates appearing in lists and individual posts. Posts will still be sorted by date, but the dates themselves will not appear anywhere.
		///</summary>
		[ImplementPropertyType("hideDates")]
		public bool HideDates
		{
			get { return this.GetPropertyValue<bool>("hideDates"); }
		}

		///<summary>
		/// Hide recent articles: Check this box to hide the recent articles list (where applicable)
		///</summary>
		[ImplementPropertyType("hideRecentArticles")]
		public bool HideRecentArticles
		{
			get { return this.GetPropertyValue<bool>("hideRecentArticles"); }
		}

		///<summary>
		/// Hide tags: Check this box to hide anything tag related from post lists and posts. You will still be able to apply tags to posts, but they won't appear anywhere.
		///</summary>
		[ImplementPropertyType("hideTags")]
		public bool HideTags
		{
			get { return this.GetPropertyValue<bool>("hideTags"); }
		}

		///<summary>
		/// Max recent articles to show: The maximum number of recent articles to be shown in the "Recent Articles" list (if it is enabled). If this is left empty, 3 articles will be shown by default.
		///</summary>
		[ImplementPropertyType("maxRecentArticlesToShow")]
		public int MaxRecentArticlesToShow
		{
			get { return this.GetPropertyValue<int>("maxRecentArticlesToShow"); }
		}

		///<summary>
		/// Max tags to show: The maximum number of popular tags to show in the side bar (if enabled). The default number is 10.
		///</summary>
		[ImplementPropertyType("maxTagsToShow")]
		public string MaxTagsToShow
		{
			get { return this.GetPropertyValue<string>("maxTagsToShow"); }
		}

		///<summary>
		/// Posts Inherit Background Image: If you check this box, all blog posts will display the same background image (and settings) as the post list.
		///</summary>
		[ImplementPropertyType("postsInheritBackgroundImage")]
		public bool PostsInheritBackgroundImage
		{
			get { return this.GetPropertyValue<bool>("postsInheritBackgroundImage"); }
		}

		///<summary>
		/// Posts Per Page: Number of posts per page. If you don't specify a value, 5 posts will be displayed per page.
		///</summary>
		[ImplementPropertyType("postsPerPage")]
		public int PostsPerPage
		{
			get { return this.GetPropertyValue<int>("postsPerPage"); }
		}

		///<summary>
		/// Show Comments: select to show discus chat
		///</summary>
		[ImplementPropertyType("showComments")]
		public bool ShowComments
		{
			get { return this.GetPropertyValue<bool>("showComments"); }
		}

		///<summary>
		/// Show post count in categories: Check this box if you want the categories list to show a count of posts in each category. Works only if categories are enabled.
		///</summary>
		[ImplementPropertyType("showItemCount")]
		public bool ShowItemCount
		{
			get { return this.GetPropertyValue<bool>("showItemCount"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return AbstractPage.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb
		{
			get { return AbstractPageBackgroundImage.GetHideBreadcrumb(this); }
		}

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight
		{
			get { return AbstractPageBackgroundImage.GetLargeHeight(this); }
		}

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[ImplementPropertyType("pageBackgroundImage")]
		public string PageBackgroundImage
		{
			get { return AbstractPageBackgroundImage.GetPageBackgroundImage(this); }
		}

		///<summary>
		/// Show Info Box
		///</summary>
		[ImplementPropertyType("showInfoBox")]
		public bool ShowInfoBox
		{
			get { return AbstractPageBackgroundImage.GetShowInfoBox(this); }
		}

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return AbstractPageBackgroundImage.GetSummary(this); }
		}

		///<summary>
		/// Use Light Overlay: If you have checked "Use Overlay" above, check this box to use a light overlay. If you leave this box unchecked, a dark overlay will be used instead.
		///</summary>
		[ImplementPropertyType("useLightOverlay")]
		public bool UseLightOverlay
		{
			get { return AbstractPageBackgroundImage.GetUseLightOverlay(this); }
		}

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor
		{
			get { return AbstractPageBackgroundImage.GetUseLightTextColor(this); }
		}

		///<summary>
		/// Use Overlay: If you have set a background image, you can use a dark or light overlay
		///</summary>
		[ImplementPropertyType("useOverlay")]
		public bool UseOverlay
		{
			get { return AbstractPageBackgroundImage.GetUseOverlay(this); }
		}

		///<summary>
		/// Light Top Menu: If you are using a dark image or a dark overlay, check this button to make the top menu options appear with light colors on this particular page so that it is visible. If you don't check this option, the default dark options will be used.
		///</summary>
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu
		{
			get { return AbstractTopMenu.GetLightTopMenu(this); }
		}
	}
}
