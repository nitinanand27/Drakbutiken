//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1080 with alias "abstractPage"
	/// <summary>Abstract Page</summary>
	public partial interface IAbstractPage : IPublishedContent
	{
		/// <summary>Alternate Breadcrumb Page Title</summary>
		string AltTitleBreadcrumb { get; }

		/// <summary>Alternate Internal Page Title</summary>
		string AltTitleInternal { get; }

		/// <summary>Alternate Page Title for Menus</summary>
		string AltTitleMenu { get; }

		/// <summary>Browser Title Override</summary>
		string BrowserTitleOverride { get; }

		/// <summary>Hide from Footer</summary>
		bool HideFromFooter { get; }

		/// <summary>Title Override</summary>
		string OverrideTitle { get; }

		/// <summary>Redirect to first sub-page</summary>
		bool RedirectFirstSubPage { get; }

		/// <summary>Hide from Menu</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>Redirect to page</summary>
		object UmbracoRedirect { get; }

		/// <summary>Alternate URL(s)</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>URL part substitution</summary>
		string UmbracoUrlName { get; }
	}

	/// <summary>Abstract Page</summary>
	[PublishedContentModel("abstractPage")]
	public partial class AbstractPage : PublishedContentModel, IAbstractPage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return GetAltTitleBreadcrumb(this); }
		}

		/// <summary>Static getter for Alternate Breadcrumb Page Title</summary>
		public static string GetAltTitleBreadcrumb(IAbstractPage that) { return that.GetPropertyValue<string>("altTitleBreadcrumb"); }

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return GetAltTitleInternal(this); }
		}

		/// <summary>Static getter for Alternate Internal Page Title</summary>
		public static string GetAltTitleInternal(IAbstractPage that) { return that.GetPropertyValue<string>("altTitleInternal"); }

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return GetAltTitleMenu(this); }
		}

		/// <summary>Static getter for Alternate Page Title for Menus</summary>
		public static string GetAltTitleMenu(IAbstractPage that) { return that.GetPropertyValue<string>("altTitleMenu"); }

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return GetBrowserTitleOverride(this); }
		}

		/// <summary>Static getter for Browser Title Override</summary>
		public static string GetBrowserTitleOverride(IAbstractPage that) { return that.GetPropertyValue<string>("browserTitleOverride"); }

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return GetHideFromFooter(this); }
		}

		/// <summary>Static getter for Hide from Footer</summary>
		public static bool GetHideFromFooter(IAbstractPage that) { return that.GetPropertyValue<bool>("hideFromFooter"); }

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return GetOverrideTitle(this); }
		}

		/// <summary>Static getter for Title Override</summary>
		public static string GetOverrideTitle(IAbstractPage that) { return that.GetPropertyValue<string>("overrideTitle"); }

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return GetRedirectFirstSubPage(this); }
		}

		/// <summary>Static getter for Redirect to first sub-page</summary>
		public static bool GetRedirectFirstSubPage(IAbstractPage that) { return that.GetPropertyValue<bool>("redirectFirstSubPage"); }

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide from Menu</summary>
		public static bool GetUmbracoNaviHide(IAbstractPage that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return GetUmbracoRedirect(this); }
		}

		/// <summary>Static getter for Redirect to page</summary>
		public static object GetUmbracoRedirect(IAbstractPage that) { return that.GetPropertyValue("umbracoRedirect"); }

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for Alternate URL(s)</summary>
		public static string GetUmbracoUrlAlias(IAbstractPage that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return GetUmbracoUrlName(this); }
		}

		/// <summary>Static getter for URL part substitution</summary>
		public static string GetUmbracoUrlName(IAbstractPage that) { return that.GetPropertyValue<string>("umbracoUrlName"); }
	}
}
