//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Text Section</summary>
	[PublishedContentModel("sectionText")]
	public partial class SectionText : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionText";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionText(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionText, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Center text and title
		///</summary>
		[ImplementPropertyType("centerTextAndTitle")]
		public bool CenterTextAndTitle
		{
			get { return this.GetPropertyValue<bool>("centerTextAndTitle"); }
		}

		///<summary>
		/// Hide title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Larger text: Check this box to make text appear with a larger font
		///</summary>
		[ImplementPropertyType("largerText")]
		public bool LargerText
		{
			get { return this.GetPropertyValue<bool>("largerText"); }
		}

		///<summary>
		/// Text
		///</summary>
		[ImplementPropertyType("textContent")]
		public IHtmlString TextContent
		{
			get { return this.GetPropertyValue<IHtmlString>("textContent"); }
		}

		///<summary>
		/// Title Size
		///</summary>
		[ImplementPropertyType("titleSize")]
		public object TitleSize
		{
			get { return this.GetPropertyValue("titleSize"); }
		}

		///<summary>
		/// Wide text: Check this box to make the section occupy more horizontal space (this has no effect is the section is used as part of a multi-column layout)
		///</summary>
		[ImplementPropertyType("wideText")]
		public bool WideText
		{
			get { return this.GetPropertyValue<bool>("wideText"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public object AnimationDirection
		{
			get { return AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}
}
