//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1079 with alias "abstractOpenGraph"
	/// <summary>Abstract OpenGraph</summary>
	public partial interface IAbstractOpenGraph : IPublishedContent
	{
		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		string MetaKeywords { get; }

		/// <summary>Meta Title</summary>
		string MetaTitle { get; }

		/// <summary>OG Description</summary>
		string OgDescription { get; }

		/// <summary>OG Image</summary>
		string OgImage { get; }

		/// <summary>OG Title</summary>
		string OgTitle { get; }

		/// <summary>OG Type</summary>
		string OgType { get; }
	}

	/// <summary>Abstract OpenGraph</summary>
	[PublishedContentModel("abstractOpenGraph")]
	public partial class AbstractOpenGraph : PublishedContentModel, IAbstractOpenGraph
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "abstractOpenGraph";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AbstractOpenGraph(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractOpenGraph, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return GetMetaKeywords(this); }
		}

		/// <summary>Static getter for Meta Keywords</summary>
		public static string GetMetaKeywords(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("metaKeywords"); }

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return GetMetaTitle(this); }
		}

		/// <summary>Static getter for Meta Title</summary>
		public static string GetMetaTitle(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("metaTitle"); }

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return GetOgDescription(this); }
		}

		/// <summary>Static getter for OG Description</summary>
		public static string GetOgDescription(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogDescription"); }

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return GetOgImage(this); }
		}

		/// <summary>Static getter for OG Image</summary>
		public static string GetOgImage(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogImage"); }

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return GetOgTitle(this); }
		}

		/// <summary>Static getter for OG Title</summary>
		public static string GetOgTitle(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogTitle"); }

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return GetOgType(this); }
		}

		/// <summary>Static getter for OG Type</summary>
		public static string GetOgType(IAbstractOpenGraph that) { return that.GetPropertyValue<string>("ogType"); }
	}
}
