//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Portfolio Item Page</summary>
	[PublishedContentModel("pagePortfolioItem")]
	public partial class PagePortfolioItem : PublishedContentModel, IAbstractlink, IAbstractOpenGraph, IAbstractPage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pagePortfolioItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PagePortfolioItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagePortfolioItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Categories: Choose one or more categories your project belongs to. You must have defined some categories for your portfolio items first.
		///</summary>
		[ImplementPropertyType("categories")]
		public string Categories
		{
			get { return this.GetPropertyValue<string>("categories"); }
		}

		///<summary>
		/// Client: If you leave this empty, no client information will be displayed.
		///</summary>
		[ImplementPropertyType("client")]
		public string Client
		{
			get { return this.GetPropertyValue<string>("client"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Custom fields: Enter the field title followed by its value and separated by ":" (one per line). For example, you may want to enter "Budget", "Location" or "Equipment" as a custom field. Those will be displayed right below the fixed fields (categories, date, link, client). Example (without the quotes): "Location:New York"
		///</summary>
		[ImplementPropertyType("customFields")]
		public string CustomFields
		{
			get { return this.GetPropertyValue<string>("customFields"); }
		}

		///<summary>
		/// Custom "Visit Site" button caption: You can override the default "Visit Site" button caption with your own here.
		///</summary>
		[ImplementPropertyType("customVisitSiteButtonCaption")]
		public string CustomVisitSiteButtonCaption
		{
			get { return this.GetPropertyValue<string>("customVisitSiteButtonCaption"); }
		}

		///<summary>
		/// Do not display categories: Check this box to hide the categories list for this project from the detail page, as well as from the listing page (where it applies). If you have globally hidden categories via the parent folder's settings page then this checkbox does nothing.
		///</summary>
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayCategories"); }
		}

		///<summary>
		/// Do not display release date: Check this box to prevent the release date from displaying in the item's page. If you have globally hidden release dates via the parent folder's settings, this checkbox will do nothing. 
		///</summary>
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayReleaseDate"); }
		}

		///<summary>
		/// Do not show large first image: If you have selected to show images as a list, you can check this box to prevent the first image show at full width (it will be part of the 2-column list together with other images). This is useful when, for example, you need to show a video on top and a list of images underneath.
		///</summary>
		[ImplementPropertyType("doNotShowLargeFirstImage")]
		public bool DoNotShowLargeFirstImage
		{
			get { return this.GetPropertyValue<bool>("doNotShowLargeFirstImage"); }
		}

		///<summary>
		/// Images: Pick one or more images to be displayed in your page. 
		///</summary>
		[ImplementPropertyType("imageGallery")]
		public string ImageGallery
		{
			get { return this.GetPropertyValue<string>("imageGallery"); }
		}

		///<summary>
		/// List image: The image that will be used on the portfolio list. If you do not select anything here, the first image from your image gallery will be used. The image will be cropped according to your other settings (spacing, wide display)
		///</summary>
		[ImplementPropertyType("listImage")]
		public string ListImage
		{
			get { return this.GetPropertyValue<string>("listImage"); }
		}

		///<summary>
		/// Related items: Choose one or more projects related to the current one. 
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public string RelatedItems
		{
			get { return this.GetPropertyValue<string>("relatedItems"); }
		}

		///<summary>
		/// Title for Related Items section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the title defined in the section settings will be used instead.
		///</summary>
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle
		{
			get { return this.GetPropertyValue<string>("relatedTitle"); }
		}

		///<summary>
		/// Release date: The release date of your project. If you leave this blank, no release date will be displayed. If you have chosen to sort portfolio items by date it is essential to have a value here for proper sorting. 
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return this.GetPropertyValue<DateTime>("releaseDate"); }
		}

		///<summary>
		/// Show images as list: By default, if there is more than one image in the gallery, a slider will be created. If you check this box the first image will be displayed on top (full page width) and the rest of the images will be displayed underneath it.
		///</summary>
		[ImplementPropertyType("showImagesAsList")]
		public bool ShowImagesAsList
		{
			get { return this.GetPropertyValue<bool>("showImagesAsList"); }
		}

		///<summary>
		/// Show "Visit Site" button: Check this box to show the "Visit Site" button if a link is present. This will be the same link shown in the project's information. 
		///</summary>
		[ImplementPropertyType("showVisitSiteButton")]
		public bool ShowVisitSiteButton
		{
			get { return this.GetPropertyValue<bool>("showVisitSiteButton"); }
		}

		///<summary>
		/// Summary
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Video Url: Enter a YouTube or Vimeo URL as it appears in the browser's address bar (do not use the embed or share code).
		///</summary>
		[ImplementPropertyType("videoUrl")]
		public string VideoUrl
		{
			get { return this.GetPropertyValue<string>("videoUrl"); }
		}

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[ImplementPropertyType("externalLink")]
		public string ExternalLink
		{
			get { return Abstractlink.GetExternalLink(this); }
		}

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[ImplementPropertyType("internalLink")]
		public string InternalLink
		{
			get { return Abstractlink.GetInternalLink(this); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return AbstractPage.GetUmbracoUrlName(this); }
		}
	}
}
