//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Global Configuration Settings</summary>
	[PublishedContentModel("configGlobalSettings")]
	public partial class ConfigGlobalSettings : PublishedContentModel, IAbstractSocialLinks
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "configGlobalSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ConfigGlobalSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigGlobalSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Add site name as suffix to page titles: If you check this box, the site name will be added as a suffix to page browser titles in the form "Pagetitle - Sitename", except from the home page.
		///</summary>
		[ImplementPropertyType("addSuffix")]
		public bool AddSuffix
		{
			get { return this.GetPropertyValue<bool>("addSuffix"); }
		}

		///<summary>
		/// Logo for dark background: This logo will be automatically displayed when you have a dark background (essentially, when you have selected your top menu to be displayed in light color). When you scroll down, it will be automatically replaced with the default logo.
		///</summary>
		[ImplementPropertyType("alternateLogo")]
		public object AlternateLogo
		{
			get { return this.GetPropertyValue("alternateLogo"); }
		}

		///<summary>
		/// Use Description from OG if Meta Description Empty: Uses the description tag value as the meta description value if the meta description tag is left empty.
		///</summary>
		[ImplementPropertyType("copyMetaDescriptionFromOgIfEmpty")]
		public bool CopyMetaDescriptionFromOgIfEmpty
		{
			get { return this.GetPropertyValue<bool>("copyMetaDescriptionFromOgIfEmpty"); }
		}

		///<summary>
		/// Use Title From OG if Meta Title Empty: Uses the og:title tag value as the meta title value if the meta title tag is left empty. If both are empty, the page's name (node name) is used.
		///</summary>
		[ImplementPropertyType("copyMetaTitleFromOgIfEmpty")]
		public bool CopyMetaTitleFromOgIfEmpty
		{
			get { return this.GetPropertyValue<bool>("copyMetaTitleFromOgIfEmpty"); }
		}

		///<summary>
		/// Default logo: The site logo to be used on all pages
		///</summary>
		[ImplementPropertyType("defaultLogo")]
		public object DefaultLogo
		{
			get { return this.GetPropertyValue("defaultLogo"); }
		}

		///<summary>
		/// Favicon and touch icon: Suggested size: 310x310px
		///</summary>
		[ImplementPropertyType("favicon")]
		public string Favicon
		{
			get { return this.GetPropertyValue<string>("favicon"); }
		}

		///<summary>
		/// Fields for OG Description: Enter the property aliases of the fields you want the description Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,)
		///</summary>
		[ImplementPropertyType("fieldsForOGDescription")]
		public string FieldsForOgdescription
		{
			get { return this.GetPropertyValue<string>("fieldsForOGDescription"); }
		}

		///<summary>
		/// Fields for OG Image: Enter the property aliases of the fields you want the image Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,). Only properties of type Textbox, Multiple Media Picker, Upload Field and image Cropper will have their values used.
		///</summary>
		[ImplementPropertyType("fieldsForOGImage")]
		public string FieldsForOgimage
		{
			get { return this.GetPropertyValue<string>("fieldsForOGImage"); }
		}

		///<summary>
		/// Fields for OG Title: Enter the property aliases of the fields you want the title Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,)
		///</summary>
		[ImplementPropertyType("fieldsForOGTitle")]
		public string FieldsForOgtitle
		{
			get { return this.GetPropertyValue<string>("fieldsForOGTitle"); }
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("footerAddress")]
		public string FooterAddress
		{
			get { return this.GetPropertyValue<string>("footerAddress"); }
		}

		///<summary>
		/// Copyright Text
		///</summary>
		[ImplementPropertyType("footerCopyrightText")]
		public IHtmlString FooterCopyrightText
		{
			get { return this.GetPropertyValue<IHtmlString>("footerCopyrightText"); }
		}

		///<summary>
		/// Email
		///</summary>
		[ImplementPropertyType("footerEmail")]
		public string FooterEmail
		{
			get { return this.GetPropertyValue<string>("footerEmail"); }
		}

		///<summary>
		/// Image: The image on the left. If you don't set an image, the site's logo will display by default.
		///</summary>
		[ImplementPropertyType("footerImage")]
		public object FooterImage
		{
			get { return this.GetPropertyValue("footerImage"); }
		}

		///<summary>
		/// Image link (external): An external link for your image. If you don't specify an external or internal link, the image will not be clickable.  The external image link overrides any value that may have been set for the internal image link.
		///</summary>
		[ImplementPropertyType("footerImageLinkExternal")]
		public string FooterImageLinkExternal
		{
			get { return this.GetPropertyValue<string>("footerImageLinkExternal"); }
		}

		///<summary>
		/// Image link (internal): A page on your site that the image redirects to when clicked. If you don't specify a link the image will not be clickable.
		///</summary>
		[ImplementPropertyType("footerImageLinkInternal")]
		public string FooterImageLinkInternal
		{
			get { return this.GetPropertyValue<string>("footerImageLinkInternal"); }
		}

		///<summary>
		/// Open link in a new window?
		///</summary>
		[ImplementPropertyType("footerImageLinkNewWindow")]
		public bool FooterImageLinkNewWindow
		{
			get { return this.GetPropertyValue<bool>("footerImageLinkNewWindow"); }
		}

		///<summary>
		/// Footer Like Button: Facebook Share & Like button
		///</summary>
		[ImplementPropertyType("footerLikeButton")]
		public bool FooterLikeButton
		{
			get { return this.GetPropertyValue<bool>("footerLikeButton"); }
		}

		///<summary>
		/// Link under text (external): An external page to link to. The external link overrides any internal link set for the link under the footer text. If you don't specify an external or internal link, the link will not be displayed.
		///</summary>
		[ImplementPropertyType("footerLinkExternal")]
		public string FooterLinkExternal
		{
			get { return this.GetPropertyValue<string>("footerLinkExternal"); }
		}

		///<summary>
		/// Link under text (internal): If you don't select a page to link to or an external link, the link underneath the footer text will not display.
		///</summary>
		[ImplementPropertyType("footerLinkInternal")]
		public string FooterLinkInternal
		{
			get { return this.GetPropertyValue<string>("footerLinkInternal"); }
		}

		///<summary>
		/// Open link in a new window?
		///</summary>
		[ImplementPropertyType("footerLinkNewWindow")]
		public bool FooterLinkNewWindow
		{
			get { return this.GetPropertyValue<bool>("footerLinkNewWindow"); }
		}

		///<summary>
		/// Link Title: The text displayed for the link. If you have selected an internal link and have not set any text here, the title of the node (for menus) will be displayed instead.
		///</summary>
		[ImplementPropertyType("footerLinkText")]
		public string FooterLinkText
		{
			get { return this.GetPropertyValue<string>("footerLinkText"); }
		}

		///<summary>
		/// Page links (column 1)
		///</summary>
		[ImplementPropertyType("footerPageLinksColumn1")]
		public string FooterPageLinksColumn1
		{
			get { return this.GetPropertyValue<string>("footerPageLinksColumn1"); }
		}

		///<summary>
		/// Page links (column 2)
		///</summary>
		[ImplementPropertyType("footerPageLinksColumn2")]
		public string FooterPageLinksColumn2
		{
			get { return this.GetPropertyValue<string>("footerPageLinksColumn2"); }
		}

		///<summary>
		/// Telephone
		///</summary>
		[ImplementPropertyType("footerTelephone")]
		public string FooterTelephone
		{
			get { return this.GetPropertyValue<string>("footerTelephone"); }
		}

		///<summary>
		/// Text on the left
		///</summary>
		[ImplementPropertyType("footerText")]
		public IHtmlString FooterText
		{
			get { return this.GetPropertyValue<IHtmlString>("footerText"); }
		}

		///<summary>
		/// Generate automatically: If you check this box, the menu will be automatically generated using all 1st-level pages on the site tree (except those who have "hide from menu" option checked). Checking this box overrides the page selector below.
		///</summary>
		[ImplementPropertyType("generateAutomatically")]
		public bool GenerateAutomatically
		{
			get { return this.GetPropertyValue<bool>("generateAutomatically"); }
		}

		///<summary>
		/// Hide Breadcrumbs: Check this box to globally hide breadcrumbs underneath the page title in top background images.
		///</summary>
		[ImplementPropertyType("hideBreadcrumbs")]
		public bool HideBreadcrumbs
		{
			get { return this.GetPropertyValue<bool>("hideBreadcrumbs"); }
		}

		///<summary>
		/// MailChimp API Key: If you leave this empty, value will be taken from your web.config file (if set). If there is no value there as well, then the subscription footer section will be hidden.
		///</summary>
		[ImplementPropertyType("mailChimpAPIKey")]
		public string MailChimpApikey
		{
			get { return this.GetPropertyValue<string>("mailChimpAPIKey"); }
		}

		///<summary>
		/// MailChimp List ID: You must have a list where the only mandatory field is the email.
		///</summary>
		[ImplementPropertyType("mailChimpListID")]
		public string MailChimpListID
		{
			get { return this.GetPropertyValue<string>("mailChimpListID"); }
		}

		///<summary>
		/// Menu items: Select the pages you want to appear on the menu. 
		///</summary>
		[ImplementPropertyType("menuItems")]
		public string MenuItems
		{
			get { return this.GetPropertyValue<string>("menuItems"); }
		}

		///<summary>
		/// Policy if OG Description Tag Empty: Choose what happens if an Open Graph Description tag for a page is empty. You can get the OG tag value from the home page, from other fields of the page or just leave it empty.
		///</summary>
		[ImplementPropertyType("policyIfOGDescriptionTagEmpty")]
		public object PolicyIfOgdescriptionTagEmpty
		{
			get { return this.GetPropertyValue("policyIfOGDescriptionTagEmpty"); }
		}

		///<summary>
		/// Policy if OG Image Tag Empty: Choose what happens if an Open Graph Image tag for a page is empty. You can get the OG tag value from the home page, from other fields of the page or just leave it empty.
		///</summary>
		[ImplementPropertyType("policyIfOGImageTagEmpty")]
		public object PolicyIfOgimageTagEmpty
		{
			get { return this.GetPropertyValue("policyIfOGImageTagEmpty"); }
		}

		///<summary>
		/// Policy if OG Title Tag Empty: Choose what happens if an Open Graph Title tag for a page is empty. You can get the OG tag value from the home page, from other fields of the page or just leave it empty.
		///</summary>
		[ImplementPropertyType("policyIfOGTagEmpty")]
		public object PolicyIfOgtagEmpty
		{
			get { return this.GetPropertyValue("policyIfOGTagEmpty"); }
		}

		///<summary>
		/// Script after Body start: Any script you put here goes immediately after the starting BODY tag
		///</summary>
		[ImplementPropertyType("scriptAfterBodyStart")]
		public string ScriptAfterBodyStart
		{
			get { return this.GetPropertyValue<string>("scriptAfterBodyStart"); }
		}

		///<summary>
		/// Script before Body end: Any script you put here goes before the closing BODY tag
		///</summary>
		[ImplementPropertyType("scriptBeforeBodyEnd")]
		public string ScriptBeforeBodyEnd
		{
			get { return this.GetPropertyValue<string>("scriptBeforeBodyEnd"); }
		}

		///<summary>
		/// Script in Head element: Any script you put here goes inside the HEAD element of the page
		///</summary>
		[ImplementPropertyType("scriptInHeadElement")]
		public string ScriptInHeadElement
		{
			get { return this.GetPropertyValue<string>("scriptInHeadElement"); }
		}

		///<summary>
		/// Site name: The site name is essentially the browser title for the home page. This will also be appended as a suffix to all other pages if you check the box below.
		///</summary>
		[ImplementPropertyType("siteName")]
		public string SiteName
		{
			get { return this.GetPropertyValue<string>("siteName"); }
		}

		///<summary>
		/// Type if OG Tag Empty: Enter the default OG type value when the type field is left empty.
		///</summary>
		[ImplementPropertyType("typeIfOGTagEmpty")]
		public string TypeIfOgtagEmpty
		{
			get { return this.GetPropertyValue<string>("typeIfOGTagEmpty"); }
		}

		///<summary>
		/// Behance
		///</summary>
		[ImplementPropertyType("socialBehance")]
		public string SocialBehance
		{
			get { return AbstractSocialLinks.GetSocialBehance(this); }
		}

		///<summary>
		/// Facebook
		///</summary>
		[ImplementPropertyType("socialFacebook")]
		public string SocialFacebook
		{
			get { return AbstractSocialLinks.GetSocialFacebook(this); }
		}

		///<summary>
		/// Flickr
		///</summary>
		[ImplementPropertyType("socialFlickr")]
		public string SocialFlickr
		{
			get { return AbstractSocialLinks.GetSocialFlickr(this); }
		}

		///<summary>
		/// Google+
		///</summary>
		[ImplementPropertyType("socialGoogleplus")]
		public string SocialGoogleplus
		{
			get { return AbstractSocialLinks.GetSocialGoogleplus(this); }
		}

		///<summary>
		/// Instagram
		///</summary>
		[ImplementPropertyType("socialInstagram")]
		public string SocialInstagram
		{
			get { return AbstractSocialLinks.GetSocialInstagram(this); }
		}

		///<summary>
		/// LinkedIn
		///</summary>
		[ImplementPropertyType("socialLinkedin")]
		public string SocialLinkedin
		{
			get { return AbstractSocialLinks.GetSocialLinkedin(this); }
		}

		///<summary>
		/// Tumblr
		///</summary>
		[ImplementPropertyType("socialTumblr")]
		public string SocialTumblr
		{
			get { return AbstractSocialLinks.GetSocialTumblr(this); }
		}

		///<summary>
		/// Twitter
		///</summary>
		[ImplementPropertyType("socialTwitter")]
		public string SocialTwitter
		{
			get { return AbstractSocialLinks.GetSocialTwitter(this); }
		}

		///<summary>
		/// Vimeo
		///</summary>
		[ImplementPropertyType("socialVimeo")]
		public string SocialVimeo
		{
			get { return AbstractSocialLinks.GetSocialVimeo(this); }
		}

		///<summary>
		/// YouTube
		///</summary>
		[ImplementPropertyType("socialYoutube")]
		public string SocialYoutube
		{
			get { return AbstractSocialLinks.GetSocialYoutube(this); }
		}
	}
}
