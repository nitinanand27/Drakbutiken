//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Contact Section</summary>
	[PublishedContentModel("sectionContact")]
	public partial class SectionContact : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionContact";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionContact(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContact, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Administrator's Email: The email address where notifications will be sent to
		///</summary>
		[ImplementPropertyType("administratorsEmail")]
		public string AdministratorsEmail
		{
			get { return this.GetPropertyValue<string>("administratorsEmail"); }
		}

		///<summary>
		/// Dropdown 1 Values: Enter the values for the first drop down field, one per line. First line will be the caption for the field. If you leave this blank, no dropdown field will be displayed.
		///</summary>
		[ImplementPropertyType("dropdown1Values")]
		public string Dropdown1Values
		{
			get { return this.GetPropertyValue<string>("dropdown1Values"); }
		}

		///<summary>
		/// Dropdown 2 Values: Enter the values for the second drop down field, one per line. First line will be the caption for the field. If you leave this blank, no dropdown field will be displayed.
		///</summary>
		[ImplementPropertyType("dropdown2Values")]
		public string Dropdown2Values
		{
			get { return this.GetPropertyValue<string>("dropdown2Values"); }
		}

		///<summary>
		/// Hide Name: Check this box to hide the Name field
		///</summary>
		[ImplementPropertyType("hideName")]
		public bool HideName
		{
			get { return this.GetPropertyValue<bool>("hideName"); }
		}

		///<summary>
		/// Hide Subject: Check this box to hide the subject field
		///</summary>
		[ImplementPropertyType("hideSubject")]
		public bool HideSubject
		{
			get { return this.GetPropertyValue<bool>("hideSubject"); }
		}

		///<summary>
		/// Hide Title
		///</summary>
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle
		{
			get { return this.GetPropertyValue<bool>("hideTitle"); }
		}

		///<summary>
		/// Intro Text: Optionally enter a summary over the form
		///</summary>
		[ImplementPropertyType("introText")]
		public string IntroText
		{
			get { return this.GetPropertyValue<string>("introText"); }
		}

		///<summary>
		/// Notification Email Body: Any text you would like to appear before the actual contents of the user's message, in the notification email sent to the administrator.
		///</summary>
		[ImplementPropertyType("notificationEmailBody")]
		public string NotificationEmailBody
		{
			get { return this.GetPropertyValue<string>("notificationEmailBody"); }
		}

		///<summary>
		/// Notification Email Subject: The subject of the notification email. If you leave this blank and have the subject form field enabled, it will contain the contents of the subject field. If the subject form field is not enabled and this field is blank, a standard subject from the dictionary will be displayed.
		///</summary>
		[ImplementPropertyType("notificationEmailSubject")]
		public string NotificationEmailSubject
		{
			get { return this.GetPropertyValue<string>("notificationEmailSubject"); }
		}

		///<summary>
		/// Notification Mail From: The email address notification emails will be sent from
		///</summary>
		[ImplementPropertyType("notificationMailFrom")]
		public string NotificationMailFrom
		{
			get { return this.GetPropertyValue<string>("notificationMailFrom"); }
		}

		///<summary>
		/// Notification Mail Sender Alias: A literal to display in place of the sender's email address when notifications are sent.
		///</summary>
		[ImplementPropertyType("notificationMailSenderAlias")]
		public string NotificationMailSenderAlias
		{
			get { return this.GetPropertyValue<string>("notificationMailSenderAlias"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public object AnimationDirection
		{
			get { return AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}
}
