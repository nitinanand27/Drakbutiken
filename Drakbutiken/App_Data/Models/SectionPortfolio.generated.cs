//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Portfolio Section</summary>
	[PublishedContentModel("sectionPortfolio")]
	public partial class SectionPortfolio : PublishedContentModel, IAbstractSectionEffects
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionPortfolio";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionPortfolio(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPortfolio, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label for "All" category option: You can specify custom text for the "All" category option - if you don't enter text here the default setting from the Dictionary (Theme.Gallery.All) will be used.
		///</summary>
		[ImplementPropertyType("allOptionLabel")]
		public string AllOptionLabel
		{
			get { return this.GetPropertyValue<string>("allOptionLabel"); }
		}

		///<summary>
		/// Columns: Select how many columns the images will be presented with (2 min, 4 max). If you don't specify a value, 2 columns will be rendered.
		///</summary>
		[ImplementPropertyType("columns")]
		public int Columns
		{
			get { return this.GetPropertyValue<int>("columns"); }
		}

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[ImplementPropertyType("dateFormat")]
		public string DateFormat
		{
			get { return this.GetPropertyValue<string>("dateFormat"); }
		}

		///<summary>
		/// Do not display categories: If you check this box, categories will not be displayed in the listing as well as in the detail page of each project. You can also leave this box unchecked and selectively hide the category list for specific projects in the portfolio item settings page.
		///</summary>
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayCategories"); }
		}

		///<summary>
		/// Do not display release date: If you check this box, release date will not be displayed inside the page of each project. You can also leave this box unchecked and selectively hide release dates on specific projects, in the portfolio item settings page.
		///</summary>
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate
		{
			get { return this.GetPropertyValue<bool>("doNotDisplayReleaseDate"); }
		}

		///<summary>
		/// Hide "All" category option: If you check this box, items will be filtered by the first category and there will be no "all" option in the category menu.
		///</summary>
		[ImplementPropertyType("hideAllCategoryOption")]
		public bool HideAllCategoryOption
		{
			get { return this.GetPropertyValue<bool>("hideAllCategoryOption"); }
		}

		///<summary>
		/// Hide next / previous item navigation: If you check this box, next/previous navigation will not be displayed at the bottom of each portfolio item page.
		///</summary>
		[ImplementPropertyType("hideNextPrevious")]
		public bool HideNextPrevious
		{
			get { return this.GetPropertyValue<bool>("hideNextPrevious"); }
		}

		///<summary>
		/// Inherit background image: Check this box to have all portfolio item page inherit their top background image (and settings) from the page that contains this section
		///</summary>
		[ImplementPropertyType("inheritBackgroundImage")]
		public bool InheritBackgroundImage
		{
			get { return this.GetPropertyValue<bool>("inheritBackgroundImage"); }
		}

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[ImplementPropertyType("masonry")]
		public bool Masonry
		{
			get { return this.GetPropertyValue<bool>("masonry"); }
		}

		///<summary>
		/// Restrict next/previous projects to current project's categories: If checked, next/previous navigation will only include projects belonging to the same category (or categories) as the project being viewed.
		///</summary>
		[ImplementPropertyType("nextPrevRestrictToCategories")]
		public bool NextPrevRestrictToCategories
		{
			get { return this.GetPropertyValue<bool>("nextPrevRestrictToCategories"); }
		}

		///<summary>
		/// Random related projects: If "related projects" are empty for a specific item, display random related projects for this item.
		///</summary>
		[ImplementPropertyType("randomRelated")]
		public bool RandomRelated
		{
			get { return this.GetPropertyValue<bool>("randomRelated"); }
		}

		///<summary>
		/// Random related projects number: Number of random related items to show (only if random items are enabled). Default is 3.
		///</summary>
		[ImplementPropertyType("randomRelatedNumber")]
		public int RandomRelatedNumber
		{
			get { return this.GetPropertyValue<int>("randomRelatedNumber"); }
		}

		///<summary>
		/// Restrict random items to categories: If random related projects are enabled, checking this box restricts random projects only to categories the currently viewed item also belongs to
		///</summary>
		[ImplementPropertyType("randomRelatedRestrictToCategories")]
		public bool RandomRelatedRestrictToCategories
		{
			get { return this.GetPropertyValue<bool>("randomRelatedRestrictToCategories"); }
		}

		///<summary>
		/// Default title for related projects section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the section will be displayed without a title.
		///</summary>
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle
		{
			get { return this.GetPropertyValue<string>("relatedTitle"); }
		}

		///<summary>
		/// Show item count: Show a counter next to category names to indicate how many portfolio items belong to each category
		///</summary>
		[ImplementPropertyType("showItemCount")]
		public bool ShowItemCount
		{
			get { return this.GetPropertyValue<bool>("showItemCount"); }
		}

		///<summary>
		/// Sort by date: If you check this box, portfolio items will be sorted by their release date (newest first). Otherwise, they'll be sorted with their natural order.
		///</summary>
		[ImplementPropertyType("sortByDate")]
		public bool SortByDate
		{
			get { return this.GetPropertyValue<bool>("sortByDate"); }
		}

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[ImplementPropertyType("spacing")]
		public bool Spacing
		{
			get { return this.GetPropertyValue<bool>("spacing"); }
		}

		///<summary>
		/// Wide: Check this box to make the portfolio take the full width of the page on desktop resolutions.
		///</summary>
		[ImplementPropertyType("wide")]
		public bool Wide
		{
			get { return this.GetPropertyValue<bool>("wide"); }
		}

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[ImplementPropertyType("animationDirection")]
		public object AnimationDirection
		{
			get { return AbstractSectionEffects.GetAnimationDirection(this); }
		}

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable
		{
			get { return AbstractSectionEffects.GetAnimationEnable(this); }
		}

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger
		{
			get { return AbstractSectionEffects.GetAnimationLarger(this); }
		}
	}
}
