//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Blog Post</summary>
	[PublishedContentModel("pageArticleItem")]
	public partial class PageArticleItem : PublishedContentModel, IAbstractOpenGraph, IAbstractPage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageArticleItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageArticleItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageArticleItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Author
		///</summary>
		[ImplementPropertyType("author")]
		public string Author
		{
			get { return this.GetPropertyValue<string>("author"); }
		}

		///<summary>
		/// Categories
		///</summary>
		[ImplementPropertyType("categories")]
		public string Categories
		{
			get { return this.GetPropertyValue<string>("categories"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Post Date (alternate): If there is a value here, it will presented instead of the default "post date" field. 
		///</summary>
		[ImplementPropertyType("dateLiteral")]
		public string DateLiteral
		{
			get { return this.GetPropertyValue<string>("dateLiteral"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("image")]
		public string Image
		{
			get { return this.GetPropertyValue<string>("image"); }
		}

		///<summary>
		/// List Image: Optionally select an image that will be displayed in lists containing this article. If you don't select an image here, other media contained in the article will be used.
		///</summary>
		[ImplementPropertyType("listImage")]
		public string ListImage
		{
			get { return this.GetPropertyValue<string>("listImage"); }
		}

		///<summary>
		/// Post Date
		///</summary>
		[ImplementPropertyType("postDate")]
		public DateTime PostDate
		{
			get { return this.GetPropertyValue<DateTime>("postDate"); }
		}

		///<summary>
		/// Summary: The summary that will be displayed in list views. If no summary is present, a portion of the actual article text will be used.
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Tags
		///</summary>
		[ImplementPropertyType("tags")]
		public object Tags
		{
			get { return this.GetPropertyValue("tags"); }
		}

		///<summary>
		/// Meta Description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return AbstractOpenGraph.GetMetaDescription(this); }
		}

		///<summary>
		/// Meta Keywords
		///</summary>
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords
		{
			get { return AbstractOpenGraph.GetMetaKeywords(this); }
		}

		///<summary>
		/// Meta Title
		///</summary>
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle
		{
			get { return AbstractOpenGraph.GetMetaTitle(this); }
		}

		///<summary>
		/// OG Description: If you do not specify a value, description will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return AbstractOpenGraph.GetOgDescription(this); }
		}

		///<summary>
		/// OG Image: If you do not specify an image, the image will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return AbstractOpenGraph.GetOgImage(this); }
		}

		///<summary>
		/// OG Title: If you do not specify a value, title will be inferred from page fields depending on your settings.
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return AbstractOpenGraph.GetOgTitle(this); }
		}

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return AbstractOpenGraph.GetOgType(this); }
		}

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb
		{
			get { return AbstractPage.GetAltTitleBreadcrumb(this); }
		}

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal
		{
			get { return AbstractPage.GetAltTitleInternal(this); }
		}

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu
		{
			get { return AbstractPage.GetAltTitleMenu(this); }
		}

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride
		{
			get { return AbstractPage.GetBrowserTitleOverride(this); }
		}

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter
		{
			get { return AbstractPage.GetHideFromFooter(this); }
		}

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle
		{
			get { return AbstractPage.GetOverrideTitle(this); }
		}

		///<summary>
		/// Redirect to first sub-page: If you check this box, the current page will immediately redirect to its first child page.
		///</summary>
		[ImplementPropertyType("redirectFirstSubPage")]
		public bool RedirectFirstSubPage
		{
			get { return AbstractPage.GetRedirectFirstSubPage(this); }
		}

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return AbstractPage.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Redirect to page: If you check this box, the current page will immediately redirect to the page selected. Checking this box takes precedence over the "Redirect to first sub-page" setting.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return AbstractPage.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return AbstractPage.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return AbstractPage.GetUmbracoUrlName(this); }
		}
	}
}
